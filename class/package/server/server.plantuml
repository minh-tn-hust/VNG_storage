@startuml
skinparam wrapwidth 300
skinparam classfontname consolas
skinparam classfontsize 16
skinparam classattributefontname cascadia code
skinparam classattributefontsize 14
left to right direction

package Model {

    interface BaseClass {
        + parseToModel(data : String) : BaseClass
        + stringify(data : BaseClass) : string
    }

    package User {
        class PersonalInfo implements BaseClass{
            - name : string
            - dob : string
            - ...
        }

        class CardGame implements BaseClass{
            - cardId : string
            - level : int
            - currentPieces : int
        }

        class Treasure implements BaseClass {
            - treasureId : string
            - level : int
            - listRandomCard : GameInfo.discoverDeck
            - listPercent : float[]
            - minPieces : int
            - maxPieces : int
            - numberRandomCard : 4
        }

        class TreasureInfo implements BaseClass {
            - currentOpen : Treasure[]
            - inQueue : Treasure[]
        }

        class UserInfo implements BaseClass {
            - uid : string
            - personalInfo : PersonalInfo
            - gameInfo : GameInfo
            - treasureInfo : TreasureInfo
        }

        class GameInfo implements BaseClass {
            - coin : int 
            - gem : int
            - frame : int
            - inGameDeck : CardGame[]
            - discoverDeck : CardGame[]
        }
    }
    package Battle {

        class BattleInfo implements BaseClass{ 
            - battleId : string
            - firstPlayer : UserInfo
            - secondPlayer : UserInfo
            - gameState : GameState
        }


        package Map {
            class Map {
                - map : Cell[][]
            }

            class Cell {
                - position : float | float
                - type : CellType
                - parentPath : Cell[]
            }
            Cell "n" --* "1" Map
        }

        class Monster {
            - monsterId : string
            - health : float
            - speed : float
            - effecting : Effecting[]
        }

        class Tower {
            - towerId : string
            - bulletPool : BulletPool
            - speed : float
            - effecting : Effecting[]
            - targetId : Monster.monsterId
            - position : float | float
        }

        class BulletPool {
            - bulletSequence : Bullet[]
        }

        class Bullet {
            - towerPosition : float | float
            - bulletId : string
            - damage : float
            - speed : float
            - range : float 
            - effecting : float 
            - position : float | float
        }

        class GameState implements BaseClass {
            - currentMap : Map[2]
            - currentTower : Tower[2][]
            - currentMonster : Monster[2][]
            - currentEnergy : int[2]
        }

        GameState "1" --* "2" Map
        Monster "n" --* "1" GameState
        Tower "n" --* "1" GameState
        BattleInfo "1" *-- "1" GameState
        Bullet "n" --* BulletPool
        Bullet "1" --* Tower
    }
}

package Handler {
    package UserHandler {
        package UserAction {
            class ForgetPasswordHandler {}
            class ChangePasswordHandler {}
            class SuccessfullLoginHandler {
                + onLoginSuccessful()
            }

            class LogOutHandler {
                + onLogOut()
            }

            class StartMatchingHandler {
                + startMatching()
            }
        }

        package Payment {
            interface DoAPayment {
                + doPayment(data)
            }
            class BankingPaymentHandler implements DoAPayment{}
            class MessengingPaymentHandler implements DoAPayment{}
            class CardPaymentHandler implements DoAPayment{}
        }

    }

    package BattleHandler {

        class BattleSimulateHandler {
            + createSimulate()
        }

        class PlantTowerHandler {
            + plantTower(uid : string, gameId: string, tower : Tower) : void
        }

        class MonsterDieHandler {
            + monsterDie(uid : string, gameId : string) : void
        }

        class MonsterSpawnHandler {
            + monsterSpawn(ui: string, gameId : string) : void
        }

        class CrystalDamagedHandler {}

        class DestroyTreeHandler {}

        class UseSpellHandler {}


    }
}

package Database {
    class DataModel {
        - uid : uid
        - data : String
    }

    class DataHandler {
        - getModelData(uidKey : string) : string
        - setModelData(uidKey : string, data : string)
    }
}

Handler --> Model
Model --> Database

@enduml