@startuml
skinparam wrapwidth 300
skinparam classfontname consolas
skinparam classfontsize 16
skinparam classattributefontname cascadia code
skinparam classattributefontsize 14
left to right direction

package Battle {

    class BattleScene {
        - controller : BattleSceneController
        - ctor(BattleSceneController controller)
    }

    class BattleSceneController {
        - battleScene : BattleScene
        - gameState : GameState
        - round : int
        - levelDescription : LevelDescription
        - monsterController : MonsterLayerController
        - towerController : TowerLayerController
        - uiController : UILayerController
        - SpellController : SpellLayerController
        ---
        + getGameState() : void 
        + getLevelDescription() : void
        + runNextRound() : void
        + updateGameState(GameState newGameState) : void
        + updateUILayer() : void
        + updateMapLayer() : void
        + udateMonsterLayer() : void
        + updateTowerLayer() : void
        + serverListenr() : void
    }

    package Effect {
        interface Effect {
            + effectType : EffectType
            + effecting(destinationObject : cc.Sprite)
        }

        class EffectFactory {
            + createEffecting(EffectType effectType) : Effect
        }

        class MonsterEffecting implements Effect {
            + effecting(target : MonsterSprite) : void
        }

        class TowerEffecting implements Effect {
            + effecting(target : TowerSprite) : void
        }
        package EMonster {
            class Healing extends MonsterEffecting {
                + type : EffectType.Monster.HEALING
                + effecting(target : MonsterSprite) : void
            }

            class SpeedUp extends MonsterEffecting {
                + type : EffectType.Monster.SPEED_UP
                + effecting(target : MonsterSprite) : void
            }

            class MFreeze extends MonsterEffecting {
                + type : EffectType.Monster.FREEZE
                + effecting(target : MonsterSprite) : void
            }
        }

        package ETower {
            class TFreeze extends TowerEffecting {
                + type : EffectType.Tower.FREEZE 
                + effecting(target : TowerSprite) : void
            }

            class TSpeedUp extends TowerEffecting {
                + type : EffectType.Tower.SPEED_UP
                + effecting(target : TowerSprite) : void
            }
        }
    }

    package Monster {
        

        class MonsterLayer  {
            - controller : MonsterLayerController
            ---
            - ctor(MonsterLayerController controller)
            - update() : void
            - addChilds(MonsterSprite[])
            ---
            # chỉ sử dụng để hiển thị mà thôi
        }

        class MonsterLayerController {
            - monsterPool : MonsterPool
            - layer : MonsterLayer
            - parentController : BattleSceneController
            ---
            - generateMonster(LevelDescription levelDescription) : void
            - spawnMonster(MonsterType monsterType) : void
            - collisionTracking() : void 
            - untarget(int monsterId) : void
            - update() : void
            ---
            # thực hiện việc spawn và di chuyển các monster 
            # thực hiện việc quản lý monster sinh ra
            # có khả năng cập nhật ngay và luôn vị trí của một monster nào đấy
            # kiểm soát hướng đi của các con quái
            # kiểm soát va chạm giữa các con quái, kiểm soát tốc độ của các con quái
            # thực hiện tái sử dụng các con quái
        }


        class MonsterPool {
            - monsterPool : MonsterSprite[]
            ---
            + registerSpriteWithLayer(MonsterSprite monsterSprite) : void
            + getMonster(MonsterType monsterType) : MonsterSprite
            + createMonster(MonsterType monsterType) : MonsterSprite
            + haveMonsterInPool(MonsterType monsterType) : MonsterSprite
            ---
            # sinh ra các quái vật và có thể thêm vào MonsterLayer được
        }

        class Monster {
            - id : int
            - health : double
            - damage : double
            - speed : double
            - weight : double
            - directionVector : cc.Point
            - inUse : bool
            - canTagetd : bool
            - effectd : MonsterEffect[]
            ---
            + update() : void
            + resetState() : void
            ---
            # tạo animation theo các hướng đi
            # thực hiện di chuyển theo vector mà MonsterManager đưa ra cho con quái
            # có thể thực hiện đẩy các con quái đi chậm hơn
            # khi tới địa điểm đích tự chuyển trạng thái inUse
            # nhận cac effect và tự biết kết thúc effect đúng lúc
            ---
            # các con quái có thể va chạm với nhau
            # một loại quái có thể có nhiều con, những con này đều có chung tài nguyên về sprite
            # có tới 5 loại quái
            # các chỉ số sinh lực, sức sát thương, có thể chọn làm mục tiêu không, số lượng năng lượng riêng
            # có thanh máu
            # có quái có những bước đi đặc biệt
            # quái được đối phương thả sẽ có vòng tròn màu đỏ dưới chân, quái mình thả sẽ có màu xanh dưới chân
            # quái có thể tự tương tác với chính nó để thực hiện các skill liên quan tới di  chuyển
            # quái cũng có thể tương tác với các trụ
        }

        class MonsterSprite {
            - monsterAsset : MonsterAsset
            - monsterDirection : cc.Point
            - canTageted : bool
            ---
            + moving() : void
            + createAnimationWithDirection() : cc.Animate
            + setDirection(cc.Point newDirection) : void
            + update() : void
            ---
            # thực hiện khởi tọa animation và tạo ra các di chuyển cho các con quái
        }
            
        class "Xương Độn Thổ" extends MonsterSprite {
            + createGroundAnimation() : void
        }

        class BossSprite extends MonsterSprite {
            + usingSkill() : void
            + surroundingEffect() : void
            ---
            # có cách load aniamtion và các thuộc tính cơ bản giống với lớp monster
            # có thể sử dụng được các skill riêng biệt 
        }

        class DarkGiant extends BossSprite {
            + usingSkill() : void
            + surroundingEffect() : void
        }

        class ForestGod extends BossSprite {
            + usingSkill() : void
            + surroundingEffect() : void
        }

        class RockMan extends BossSprite {
            + usingSkill() : void
            + surroundingEffect() : void
        }

        class DesertKing extends BossSprite {
            + usingSkill() : void
            + surroundingEffect() : void
        }

        class GiantIce extends BossSprite {
            + usingSkill() : void
            + surroundingEffect() : void
        }

        class WoodMan extends BossSprite {
            + usingSkill() : void
            + surroundingEffect() : void
        }

        MonsterSprite -up-|> Monster
        MonsterPool "1" *-- "n" MonsterSprite

        MonsterLayerController "1" *-- "1" MonsterPool
        MonsterLayerController "1" *-down- "1" MonsterLayer

        Effect "n" -left-o "1" MonsterSprite
    }

    package SpellCasting {

        class SpellPool {
            - spellPool : SpellSprite[]
            ---
            + registerSpriteWithLayer(SpellSprite spellSprite) : void
            + getSpell(SpellType spellType) : SpellSprite
            + createSpell(SpellType spellType) : SpellSprite
            + haveSpellInPool(SpellType spellType) : SpellSprite
        }

        class SpellSprite {
            - id : int
            - inUse : bool
            - spellAsset : SpellAsset
            - targetsId : int[]
            - timeEffect : double
            - statingTime : int
            ---
            + createAnimation()
            + effecting()
            + endEffect()
            + update()
        }

        class SpellLayer {
            - controller : SpellController
            - ctor(SpellLayerController controller)
            - addTouchListener()
        }

        class SpellLayerController {
            - parentController : BattleSceneController
            - spellPool : SpeelPool
            ---
            - castSpell(cc.Point targetPosition, SpellType spellType) : void
            - effectedMonsterTargetForSpell(cc.Point spellPosition) : int[]
            - effectedTowerTargetForSpell(cc.Point spellPosition) : int[]
        }

        class "Cầu Lửa" extends SpellSprite {
            - damage : double
            + effecting()
        }
        class "Đóng Băng" extends SpellSprite {
            - damage : double
            + efecting()
        }
        class "Tăng Tốc" extends SpellSprite {
            - speed : double
            + effecting()
        }
        class "Hồi Máu" extends SpellSprite {
            - healthSpeed : double
            + effecting()
        }
        class "Sức mạnh" extends SpellSprite {
            - additionPercent : double
            + effecting()
        }

        SpellLayer "1" --* "1" SpellLayerController
        SpellSprite "n" -d-* "1" SpellPool
        SpellPool "1" --* SpellLayerController



    }

    package Tower {

        class TowerLayerController {
            - parentController : BattleSceneController
            - towerSequence : Tower[]
            - towerLayer : TowerLayer
            ---
            + findingTargetForTower(cc.Point position, AttackMode attackMode) : void
            + canUpdateTowerInIndex(cc.Point index, CardType cardType) : bool
            + updateTowerWithIndex(cc.Point index)
            + towerTargeted() : void
            ---
            # thực hiện hiển thị các trụ lên sân
            # thực hiện cập nhât và xử lý hình ảnh của các trụ
            # thực hiện giao tiếp với MonsterLayer để lấy được danh sách quái
            # thực hiện các cử chỉ với trụ (trong đó bao gồm cả nâng cấp và điều chỉnh chế độ chọn mục tiêu của trụ)

        }

        class TowerLayer {
            - controller : TowerLayerController
            ---
            + ctor(TowerLayerController controller)
            + addTouchListener() : void
            + addChilds(TowerSprite[])
            + update() : void
            ---
            # chỉ sử dụng để hiển thị trụ
        }

        class TowerSprite {
            - position : cc.Point
            - id : int
            - range : float
            - level : int
            - canAttack : bool
            - effectd : TowerEffecting[]
            - type : TowerType
            ---
            + fire() : void
            + createAnimation() : void
            + changeTarget() : void
            + updateSprite() : void
            + update()
            ---
            # bắt được danh sách các loại quái hiên tại đang ở trong phạm vi
            # năng lượng sử dụng để đặt khác nhau
            # tháp có khả năng tiến hóa được
            # hệ thống có nhiều các ưu tiên cho quái lựa chọn
            # hệ thống đạn bắn - 2 loại
            # 7 loại trụ, mỗi loại trụ có các loại đạn khác nhau
            # loại đạn có thể là tầm rộng hoặc là một mục tiêu duy nhất
            # có thể có trụ không bắn ra đạn - trụ hỗ trợ
            # có thể hủy tháp đã chọn
            # có thể có được danh sách quái hiện tại đang ở vị trí nào trên bản đồ
            # có các phương thức thực hiện các các lựa chọn quái vật khác nhau
        }

        class SupportTower extends TowerSprite {
            - targetType : Monster | Tower
            - targetIds : int[]
            ---
            + fire() : void
        }

        class AttackTower extends TowerSprite {
            - attackSpeed : float
            - dame : float
            - haveTarget : bool
            - bulletPool : BulletPool
            - targetId : int
            - attackMode : AttackMode
            ---
            + fire() : void
            + canTargetOnThis(cc.Point position) : bool
            + untarget() : void
        }

        class "Pháo Cú Tower" extends AttackTower {}
        class "Quạ Pháp Sư Tower" extends AttackTower {}
        class "Ếch Đồ Tể Tower" extends AttackTower {}
        class "Thỏ Xả Nhớt Tower" extends AttackTower {}
        class "Gấu Bắc Cực Tower" extends AttackTower {}

        package Bullet {
            
            class BulletPool {
                - bulletPool : BulletSprite[]
                ---
                + registerSpriteWithLayer(BulletSprite bulletSprite) : void
                + getBullet(BulletType bulletType) : BulletSprite
                + createBullet(BulletType bulletType) : BulletSprite
                + haveBulletInPool(BulletType bulletType) : BulletSprite
            }

            class BulletSprite  {
                - canUseTowerSkill : bool
                - inUsed : bool
                - speed : int
                - damage : double
                - range : double
                - towerPosition : cc.Point
                - type : Bullet.PosisionBase | Bullet.TargetBase
                ---
                + create() : BulletSprite
                + animate() : void
                + createAnimation() : void
                + effecting() : void
                + exploded() : void
                - usingSkill() : void
                ---
                # mỗi tòa tháp sẽ có một loại đạn riêng, override lại effecting
                # mỗi loại đạn sẽ có các hành vi khách nhau như là nổ lan, gây đống băng, ...
                # đạn sẽ có các thuộc tính cơ bản như là tốc độ bay, chuỗi animation, và sức sát thương
            }

            class "Pháo Cú Bullet" extends BulletSprite {
                - type : Bullet.TargetBase
                - exploded() : void
                - effecting() : void
                - usingSkill() : void
            }
            class "Quạ Pháp Sư Bullet" extends BulletSprite {
                - type : Bullet.PosisionBase
                - exploded() : void
                - effecting() : void
                - usingSkill() : void
            }
            class "Ếch Đồ Tể Bullet" extends BulletSprite {
                - type : Bullet.PosisionBase
                - exploded() : void
                - effecting() : void
                - usingSkill() : void
            }
            class "Thỏ Xả Nhớt Bullet" extends BulletSprite{
                - type : Bullet.PosisionBase
                - effecting() : void
                - exploded() : void
                - usingSkill() : void
            }
            class "Gấu Bắc Cực Bullet" extends BulletSprite{
                - type : Bullet.TargetBase
                - effecting() : void
                - exploded() : void
                - usingSkill() : void
            }


        }

        TowerLayerController "1" *-- "n" TowerSprite
        TowerLayer "1" -right-* "1" TowerLayerController

        AttackTower "1" *-left- "1" BulletPool
        BulletSprite "n" -up-* "1" BulletPool

        Effect "n" -right-o "1" TowerSprite
    }

    package UI {
        class UILayerController {
            - parentController : BattleSceneController
            - energy : int
            - cardSequence : Card[]
            - cardSpriteSequence : CardSprite[]
            - nextCard : Card
            - userInfo : UserInfo
            - selectedIndex : int
            ---
            + usingCard() : void
            + randomNextCard() : Card
            + updateEnerge() : void
            + increaseEnergy(int additionEnergy) : void
            + foldCardWithIndex(int index) : void
            + cardSelected(int index) : void
            ---
            # chứa thông tin về các thẻ bài quái tiếp theo sẽ được chọn của người chơi
            # chứa năng lượng hiện tại của người chơi
            # hiển thị các thông tin liên quan tới màn chơi
        }

        class UILayer {
            - controller : UILayerController
            + init(UILayerController parent)
            + addTouchListener()
        }

        class CardSprite {
            - type : CardType
            - level : int
            ---
            + createCardSprite() : void
            + changeCardType() : void
        }

        UILayerController "1" *-- "1" UILayer
        CardSprite "n" -r-* "1" UILayer
    }

    package Map {

        class MapLayer {
            - controller : MapController
            - mapSprite : cc.Sprite[][]
            - cursorSrite : cc.Sprite
            ---
            + updateMapLayer() : void
            + addTouchListener() : void
            + cardSelected(Card selectedCard) : void
            + changeCursorSprite() : void
            ---
            # chứa map hiện tại của người chơi, cập nhật ô đặc biệt, cập nhật trụ
            # có mối liên hệ với UILayer, khi một người bật card lên, mapLayer sẽ xác định các vị trí mà card có thể đặt được
        }

        class MapLayerController {
            - myMap : Cell[][]
            - enermyMap : Cell[][]
            - mapLayer : MapLayer
            ---
            + pathFinding()
            + canPlantHere(cc.Point position) : bool
            + plantTower(cc.Point position) : void
            + updateMap() : void
            + getPathFromIndex(cc.Point index) : void
            ---
            # thực hiện nhận map từ server ()
            # thực hiện tìm đường đi có trong map hiện tại ()
            # thực hiện kiểm tra xem một trụ được đặt có hợp lệ hay không ()
            # thực hiện cập nhật những gì mà server gửi - những nước đi của đối thủ ()
            # thực hiện giao tiếp với TowerLayer
        }

        class Cell  {
            - cellType : CellType
            - path : cc.Point[]
            ---
            + changeCellType(CellType newCellType) : void
            ---
            # có danh sách đường đi
            # có trạng thái hiện tại 
        }

        MapLayerController "1" *-- "2" MapLayer
        Cell "n" --* "1" MapLayerController
    }

    MonsterLayerController "1" -down-* "1" BattleSceneController
    TowerLayerController "1" -up-* "1" BattleSceneController
    SpellLayerController "1" -up-* "1" BattleSceneController
    UILayerController "1" -down-* "1" BattleSceneController
    MapLayerController "1" --* "1" BattleSceneController

    BattleSceneController "1" *-right- "1" BattleScene

    ' package Config {
    '     package Effect {
    '         class EffectType.Monster {
    '             + SPEED_UP : 1
    '             + HEALING : 2
    '         }

    '         class EffectType.Tower {
    '             + FREEZE : 1
    '         }
    '     }
        
    '     package Monster {
    '         class MonsterType {
    '             + GHOST_SWORDER : 1
    '             + SkELETON_CROW : 2
    '             + GIANT : 3
    '             + EVIL_BAT : 4
    '             + UNDERGROUND_SkELETON : 5
    '         }

    '         ' class MonsterAsset.GHOST_SWORDER {}
    '         ' class MonsterAsset.GHOST_SWORDER {}
    '         ' class MonsterAsset.GHOST_SWORDER {}
    '         ' class MonsterAsset.GHOST_SWORDER {}

    '     }
    ' }

}

@enduml